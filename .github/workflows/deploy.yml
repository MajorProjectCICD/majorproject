name: Build and Deploy to Server
on:
  push:
    branches: ['prod']
  workflow_dispatch:
jobs:
  build_and_push:
    runs-on: ubuntu-latest
    name: Deploy build docker image, push and deploy to server
    env:
      MACHINE: home
    steps:
      - uses: actions/checkout@v3
      - name: Setup Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          # tags: tag:ci
      - name: Configure Docker for insecure registry
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
        run:  | 
          sudo mkdir -p /etc/docker
          sudo tee /etc/docker/daemon.json <<EOF
          {
            "insecure-registries": ["$DOCKER_REGISTRY"]
          }
          EOF
          sudo systemctl restart docker
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push Image
        uses: docker/build-push-action@v3
        with:
          context: .  # Assuming your Dockerfile is at the root
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest
      - name: Add SSH key
        id: ssh
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          MACHINE_IP="$(tailscale ip -6 $MACHINE)"
          ssh-keyscan $MACHINE_IP >> ~/.ssh/known_hosts
          printf "%s" "$SSH_KEY" > ~/.ssh/key
          chmod 600 ~/.ssh/key   
      - name: SSH into server and update deployment
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: | 
            docker pull $DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:latest
            docker stop $(docker ps -q --filter ancestor=$DOCKER_IMAGE_NAME)  # Stops any container based on the image
            docker rm $(docker ps -q -a --filter ancestor=$DOCKER_IMAGE_NAME)  # Removes stopped containers
            docker run -d --name rollsync_container -p 3000:3000 
